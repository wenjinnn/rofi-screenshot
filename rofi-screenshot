#!/usr/bin/env bash

## rofi-screenshot
## Author: ceuk @ github
## Licence: WTFPL
## Usage:
##    show the menu with rofi-screenshot
##    stop recording with rofi-screenshot -s

# Screenshot directory
screenshot_directory="${ROFI_SCREENSHOT_DIR:-${XDG_PICTURES_DIR:-$HOME/Pictures}/Screenshots}"

# Default date format
default_date_format="${ROFI_SCREENSHOT_DATE_FORMAT:-"+%Y-%d-%m_%H-%M-%S"}"

# set ffmpeg defaults
ffmpeg() {
  command ffmpeg -hide_banner -loglevel error -nostdin "$@"
}

video_to_gif() {
  ffmpeg -i "$1" -vf palettegen -f image2 -c:v png - |
    ffmpeg -i "$1" -i - -filter_complex paletteuse "$2"
}

countdown() {
  notify-send --app-name="screenshot" "Screenshot" "Recording in 3" -t 1000
  sleep 1
  notify-send --app-name="screenshot" "Screenshot" "Recording in 2" -t 1000
  sleep 1
  notify-send --app-name="screenshot" "Screenshot" "Recording in 1" -t 1000
  sleep 1
}

crtc() {
  notify-send --app-name="screenshot" "Screenshot" "Select a region to capture"
  grim -g "$(slurp)" - | wl-copy
  notify-send --app-name="screenshot" "Screenshot" "Region copied to Clipboard"
}

crtf() {
  notify-send --app-name="screenshot" "Screenshot" "Select a region to capture"
  dt=$1
  output=$screenshot_directory/$dt.png
  grim -g "$(slurp)" "$output"
  optional_action_notify "$output" "Region saved to $output"
}

cwtc() {
  notify-send --app-name="screenshot" "Screenshot" "Select a window to capture"
  if [ "sway" == "$XDG_CURRENT_DESKTOP" ]; then
    grim -g "$(swaymsg -t get_tree | jq -r '.. | select(.pid? and .visible?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"' | slurp)" - | wl-copy
  else
    grim -g "$(hyprctl clients -j | jq -r ".[] | select(.workspace.id | IN($(hyprctl -j monitors | jq 'map(.activeWorkspace.id) | join(",")' | tr -d \")))" | jq -r ".at,.size" | jq -s "add" | jq '_nwise(4)' | jq -r '"\(.[0]),\(.[1]) \(.[2])x\(.[3])"'| slurp)" - | wl-copy
  fi
  notify-send --app-name="screenshot" "Screenshot" "Window copied to Clipboard"
}

cwtf() {
  notify-send --app-name="screenshot" "Screenshot" "Select a window to capture"
  dt=$1
  output=$screenshot_directory/$dt.png
  if [ "sway" == "$XDG_CURRENT_DESKTOP" ]; then
    grim -g "$(swaymsg -t get_tree | jq -r '.. | select(.pid? and .visible?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"' | slurp)" - | wl-copy
  else
    grim -g "$(hyprctl clients -j | jq -r ".[] | select(.workspace.id | IN($(hyprctl -j monitors | jq 'map(.activeWorkspace.id) | join(",")' | tr -d \")))" | jq -r ".at,.size" | jq -s "add" | jq '_nwise(4)' | jq -r '"\(.[0]),\(.[1]) \(.[2])x\(.[3])"'| slurp)" - | wl-copy
  fi
  optional_action_notify "$output" "Window saved to $output"
}

cstc() {
  sleep 1
  grim - | wl-copy
  notify-send --app-name="screenshot" "Screenshot" "Screenshot copied to Clipboard"
}

cstf() {
  dt=$1
  output=$screenshot_directory/$dt.png
  sleep 1
  grim "$output"
  optional_action_notify "$output" "Saved to $output"
}

rgrtf() {
  notify-send --app-name="screenshot" "Screenshot" "Select a region to record"
  dt=$1
  wf-recorder -g "$(slurp)" -f /tmp/screenshot_gif.mp4
  notify-send --app-name="screenshot" "Screenshot" "Converting to gif… (can take a while)"
  video_to_gif /tmp/screenshot_gif.mp4 "$screenshot_directory/$dt.gif"
  rm /tmp/screenshot_gif.mp4
  notify-send --app-name="screenshot" "Screenshot" "Saved to ${screenshot_directory//${HOME}/~}/$dt.gif"
}

rgstf() {
  countdown
  dt=$1
  wf-recorder -f /tmp/screenshot_gif.mp4
  notify-send --app-name="screenshot" "Screenshot" "Converting to gif… (can take a while)"
  video_to_gif /tmp/screenshot_gif.mp4 "$screenshot_directory/$dt.gif"
  rm /tmp/screenshot_gif.mp4
  notify-send --app-name="screenshot" "Screenshot" "Saved to ${screenshot_directory//${HOME}/~}/$dt.gif"
}

rvrtf() {
  notify-send --app-name="screenshot" "Screenshot" "Select a region to record"
  dt=$1
  wf-recorder -g "$(slurp)" -f "$screenshot_directory/$dt.mp4"
  notify-send --app-name="screenshot" "Screenshot" "Saved to ${screenshot_directory//${HOME}/~}/$dt.mp4"
}

rvstf() {
  countdown
  dt=$1
  wf-recorder -f "$screenshot_directory/$dt.mp4"
  notify-send --app-name="screenshot" "Screenshot" "Saved to ${screenshot_directory//${HOME}/~}/$dt.mp4"
}

rvrtfa() {
  notify-send --app-name="screenshot" "Screenshot" "Select a region to record"
  dt=$1
  wf-recorder -g "$(slurp)" -f "$screenshot_directory/$dt.mp4" --audio
  notify-send --app-name="screenshot" "Screenshot" "Saved to ${screenshot_directory//${HOME}/~}/$dt.mp4"
}

rvstfa() {
  countdown
  dt=$1
  wf-recorder -f "$screenshot_directory/$dt.mp4" --audio
  notify-send --app-name="screenshot" "Screenshot" "Saved to ${screenshot_directory//${HOME}/~}/$dt.mp4"
}

stop_recording() {
  if [ -z "$(pgrep wf-recorder)" ]; then
    notify-send --app-name="screenshot" "Screenshot" "No recording found"
    exit 1
  fi

  killall -TERM wf-recorder
  notify-send --app-name="screenshot" "Screenshot" "Recording stopped"
}

get_options() {
  echo "  Region  Clip"
  echo "  Region  File"
  echo "  Window  Clip"
  echo "  Window  File"
  echo "  Screen  Clip"
  echo "  Screen  File"
  echo "  Region  File (GIF)"
  echo "  Screen  File (GIF)"
  echo "  Region  File (MP4)"
  echo "  Screen  File (MP4)"
  echo "  Region  File (MP4 with audio)"
  echo "  Screen  File (MP4 with audio)"
  echo "  Stop recording"
}

check_deps() {
  if ! hash "$1" 2> /dev/null; then
    echo "Error: This script requires $1"
    exit 1
  fi
}

show_help() {
  echo ### rofi-screenshot
  echo "USAGE: rofi-screenshot [OPTION] <argument>"
  echo "(no option)"
  echo "    show the screenshot menu"
  echo "-i, --immediately"
  echo "    take a screenshot immediately without opening Rofi"
  echo "-s, --stop"
  echo "    stop recording"
  echo "-h, --help"
  echo "    this screen"
  echo "-d, --directory <directory>"
  echo "    set the screenshot directory"
  echo "-t, --timestamp <format>"
  echo "    set the format used for timestamps, in the format the date"
  echo "    command expects (default '+%d-%m-%Y %H:%M:%S')"
}

check_directory() {
  if [[ ! -d $1 ]]; then
    echo "Directory does not exist!"
    exit 1
  fi
}

optional_action_notify() {
  output=$1
  notify_detail=$2
  actions=""
  if command -v nautilus &> /dev/null; then
    actions+=' -A "show=Show in files"'
  fi
  if command -v xdg-open &> /dev/null; then
    actions+=' -A "view=View"'
  fi
  if command -v swappy &> /dev/null; then
    actions+=' -A "edit=Edit with swappy"'
  fi
  if command -v tesseract &> /dev/null; then
    actions+=' -A "ocr=OCR"'
  fi
  confirm=$(eval "notify-send \
    $actions \
    --app-name='screenshot' \
    'Screenshot' \
    '$notify_detail'")
  if [ "show" == "$confirm" ]; then
    nautilus "$output"
  elif [ "view" == "$confirm" ]; then
    xdg-open "$output"
  elif [ "edit" == "$confirm" ]; then
    swappy -f "$output"
  elif [ "ocr" == "$confirm" ]; then
    tesseract "$output" - | wl-copy
  fi
}

main() {
  # check dependencies
  check_deps slurp
  check_deps grim
  check_deps ffmpeg
  check_deps wl-copy
  check_deps wf-recorder
  check_deps rofi
  check_deps hyprctl
  check_deps notify-send
  check_deps jq

  # rebind long args as short ones
  for arg in "$@"; do
    shift
    case "$arg" in
      '--help') set -- "$@" '-h' ;;
      '--directory') set -- "$@" '-d' ;;
      '--timestamp') set -- "$@" '-t' ;;
      '--immediately') set -- "$@" '-i' ;;
      '--stop') set -- "$@" '-s' ;;
      *) set -- "$@" "$arg" ;;
    esac
  done

  # parse short options
  OPTIND=1
  date_format="$default_date_format"
  while getopts "hd:t:s:i" opt; do
    case "$opt" in
      'h')
        show_help
        exit 0
        ;;
      'd')
        check_directory $OPTARG
        screenshot_directory="$OPTARG"
        ;;
      't')
        date_format="$OPTARG"
        ;;
      's')
        stop_recording
        exit 0
        ;;
      'i')
        cstc
        exit 0
        ;;
      '?')
        show_help
        exit 1
        ;;
    esac
  done
  shift $(expr $OPTIND - 1)

  # Get choice from rofi
  choice=$( (get_options) | rofi -dmenu -i -fuzzy -p "Screenshot")

  # If user has not picked anything, exit
  if [[ -z "${choice// /}" ]]; then
    exit 1
  fi

  cmd='date "${date_format}"'
  dt=$(eval $cmd)

  # run the selected command
  case $choice in
    '  Region  Clip')
      crtc
      ;;
    '  Region  File')
      crtf "$dt"
      ;;
    '  Window  Clip')
      cwtc
      ;;
    '  Window  File')
      cwtf "$dt"
      ;;
    '  Screen  Clip')
      cstc
      ;;
    '  Screen  File')
      cstf "$dt"
      ;;
    '  Region  File (GIF)')
      rgrtf "$dt"
      ;;
    '  Screen  File (GIF)')
      rgstf "$dt"
      ;;
    '  Region  File (MP4)')
      rvrtf "$dt"
      ;;
    '  Screen  File (MP4)')
      rvstf "$dt"
      ;;
    '  Region  File (MP4 with audio)')
      rvrtfa "$dt"
      ;;
    '  Screen  File (MP4 with audio)')
      rvstfa "$dt"
      ;;
    '  Stop recording')
      stop_recording
      ;;
  esac

  # done
  set -e
}

main "$@" &

exit 0

! /bin/bash
